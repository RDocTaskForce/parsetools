
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(parsetools)
> test_check("parsetools")
1. Error: '._check_id' (@test-check_id.R#5) ------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-check_id.R:5
2: stop("x does not have srcref.")

2. Error: '._check_id' (@test-checks.R#5) --------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-checks.R:5
2: stop("x does not have srcref.")

3. Error: '._check_parse_data' (@test-checks.R#15) -----------------------------
Cannot convert to parse-data.
1: ._check_parse_data(df) at testthat/test-checks.R:15
2: stop("Cannot convert to parse-data.")

4. Error: 'get_child_ids' (@test-children.R#5) ---------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-children.R:5
2: stop("x does not have srcref.")

5. Error: 'get_child' (@test-children.R#44) ------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = text)) at testthat/test-children.R:44
2: stop("x does not have srcref.")

6. Error: 'get_children' (@test-children.R#67) ---------------------------------
x does not have srcref.
1: get_parse_data(parse(text = text)) at testthat/test-children.R:67
2: stop("x does not have srcref.")

7. Error: 'classify_comment.data.frame' (@test-comments.R#24) ------------------
valid_parse_data(x) is not TRUE
1: classify_comment.data.frame(df) at testthat/test-comments.R:24
2: stopifnot(valid_parse_data(x))
3: stop(sprintf(ngettext(length(r), "%s is not TRUE", "%s are not all TRUE"), ch), call. = FALSE, 
       domain = NA)

8. Error: 'classify_comment' (@test-comments.R#43) -----------------------------
no applicable method for 'classify_comment' applied to an object of class "NULL"
1: classify_comment(df) at testthat/test-comments.R:43

9. Error: 'is_comment.data.frame' (@test-comments.R#61) ------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "\n        ## normal comment           \n        #' Roxygen comment          \n        #! Documentation comment    \n        #< Relative comment         \n        #^ Continuation comment     \n        #@ Tag comment              \n        Hello\n    "
   })) at testthat/test-comments.R:61
2: stop("x does not have srcref.")

10. Error: 'is_doc_comment.data.frame' (@test-comments.R#82) -------------------
x does not have srcref.
1: get_parse_data(parse(text = "{\n        ## normal comment           \n        #' Roxygen comment          \n        #! Documentation comment    \n        #< Relative comment         \n        #^ Continuation comment     \n        #@ Tag comment              \n    }")) at testthat/test-comments.R:82
2: stop("x does not have srcref.")

11. Error: 'get_associated_continuation' (@test-comments.R#95) -----------------
x does not have srcref.
1: get_parse_data(parse(text = "\n    function( x = 0 #< just a random argument\n            , y = 1 #< yet another\n                    #^ argument.\n            ){x**y}\n    ")) at testthat/test-comments.R:95
2: stop("x does not have srcref.")

12. Error: 'strip_doc_comment_leads.data.frame' (@test-comments.R#128) ---------
no applicable method for 'is_comment' applied to an object of class "NULL"
1: get_comments(pd) at testthat/test-comments.R:128
2: is_comment(pd)

13. Error: 'strip_doc_comment_leads' (@test-comments.R#155) --------------------
no applicable method for 'is_comment' applied to an object of class "NULL"
1: get_comments(pd) at testthat/test-comments.R:155
2: is_comment(pd)

14. Error: 'get_family' (@test-family.R#5) -------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "a <- 1\n        {# section 1\n        b <- 2\n        {# section 2\n        c <- 3\n        }# end of section 1\n        d <- 4\n        }# end of section 2\n        e <- 5\n    "
   })) at testthat/test-family.R:5
2: stop("x does not have srcref.")

15. Error: 'get_firstborn' (@test-family.R#59) ---------------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "a <- 1\n        {# section 1\n        b <- 2\n        {# section 2\n        c <- 3\n        }# end of section 1\n        d <- 4\n        }# end of section 2\n        e <- 5\n    "
   })) at testthat/test-family.R:59
2: stop("x does not have srcref.")

16. Failure: 'valid_parse_data' (@test-get_parse_data.R#6) ---------------------
valid_parse_data(df) isn't true.
parse-data

17. Error: 'as_parse_data' (@test-get_parse_data.R#12) -------------------------
Cannot convert to parse-data: Not a data.frame object
1: expect_is(as_parse_data(df), "parse-data") at testthat/test-get_parse_data.R:12
2: klass(object)
3: paste(class(x), collapse = "/")
4: as_parse_data(df)
5: stop("Cannot convert to parse-data: ", is.valid)

18. Error: 'fix_eq_assign' (@test-get_parse_data.R#18) -------------------------
second argument must be a list
1: fix_eq_assign(pd) at testthat/test-get_parse_data.R:18
2: do.call(order, pd)
3: stop("second argument must be a list")

19. Error: '`[.parse-data`' (@test-get_parse_data.R#33) ------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-get_parse_data.R:33
2: stop("x does not have srcref.")

20. Error: '`-.parse-data`' (@test-get_parse_data.R#39) ------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "{# Section Block\n#' Roxygen Line Beore\nnested <-\nfunction(x){\n    #' line inside\n    cat(\"hello world\")\n}\n}\n"
   })) at testthat/test-get_parse_data.R:39
2: stop("x does not have srcref.")

21. Error: 'is_grouping' (@test-grouping.R#5) ----------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "{\n        this(is+a-grouping)\n    }")) at testthat/test-grouping.R:5
2: stop("x does not have srcref.")

22. Error: 'get_groupings' (@test-grouping.R#15) -------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "{\n        this(is+a-grouping)\n    }")) at testthat/test-grouping.R:15
2: stop("x does not have srcref.")

23. Error: 'fix_grouping_comment_association' (@test-grouping.R#24) ------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "\n    {# grouped code\n        # normal comment\n        #' Documenation before\n        hw <- function(){\n            #! documentation comment inside.\n            print('hello world')\n        }\n    }\n    {# Second Group\n        1+2\n    }\n    # Comment 3\n    4+5\n    "
   })) at testthat/test-grouping.R:24
2: stop("x does not have srcref.")

24. Error: 'is_pd_assignment' (@test-is_parse_data.R#9) ------------------------
x does not have srcref.
1: get_parse_data(parse(text = "x <-  1")) at testthat/test-is_parse_data.R:9
2: stop("x does not have srcref.")

25. Error: 'get_pd_call_args' (@test-is_parse_data.R#21) -----------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-is_parse_data.R:21
2: stop("x does not have srcref.")

26. Error: 'get_pd_assign_value' (@test-is_parse_data.R#33) --------------------
x does not have srcref.
1: get_parse_data(parse(text = "x<-1")) at testthat/test-is_parse_data.R:33
2: stop("x does not have srcref.")

27. Error: 'get_pd_assign_variable' (@test-is_parse_data.R#54) -----------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "hello_world <- function(){\n        print('hello world')\n    }\n    "
   })) at testthat/test-is_parse_data.R:54
2: stop("x does not have srcref.")

28. Error: 'get_pd_assign_variable_id' (@test-is_parse_data.R#65) --------------
x does not have srcref.
1: "hello_world <- function(){\n    print('hello world')\n}\n" %>% parse(text = .) %>% 
       get_parse_data() %>% sort at testthat/test-is_parse_data.R:65
2: withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
3: eval(quote(`_fseq`(`_lhs`)), env, env)
4: eval(expr, envir, enclos)
5: `_fseq`(`_lhs`)
6: freduce(value, `_function_list`)
7: function_list[[i]](value)
8: get_parse_data(.)
9: stop("x does not have srcref.")

29. Error: 'is_pd_function' (@test-is_parse_data.R#80) -------------------------
x does not have srcref.
1: get_parse_data(parse(text = "function(){}")) at testthat/test-is_parse_data.R:80
2: stop("x does not have srcref.")

30. Error: 'is_root' (@test-is_root.R#5) ---------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-is_root.R:5
2: stop("x does not have srcref.")

31. Error: 'all_root_ids' (@test-is_root.R#61) ---------------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "a <- 1\n        {# section 1\n        b <- 2\n        {# section 2\n        c <- 3\n        }# end of section 1\n        d <- 4\n        }# end of section 2\n        e <- 5\n    "
   })) at testthat/test-is_root.R:61
2: stop("x does not have srcref.")

32. Error: 'get_parent_id' (@test-parent.R#5) ----------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-parent.R:5
2: stop("x does not have srcref.")

33. Error: 'get_ancestor_ids' (@test-parent.R#16) ------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-parent.R:16
2: stop("x does not have srcref.")

34. Error: 'is_pd_assignment' (@test-pd_classes.R#5) ---------------------------
x does not have srcref.
1: get_parse_data(parse(text = "x <-  1")) at testthat/test-pd_classes.R:5
2: stop("x does not have srcref.")

35. Error: 'get_pd_call_args' (@test-pd_classes.R#17) --------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-pd_classes.R:17
2: stop("x does not have srcref.")

36. Error: 'get_pd_assign_value' (@test-pd_classes.R#29) -----------------------
x does not have srcref.
1: get_parse_data(parse(text = "x<-1")) at testthat/test-pd_classes.R:29
2: stop("x does not have srcref.")

37. Error: 'get_pd_assign_variable' (@test-pd_classes.R#50) --------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "hello_world <- function(){\n        print('hello world')\n    }\n    "
   })) at testthat/test-pd_classes.R:50
2: stop("x does not have srcref.")

38. Error: 'get_pd_assign_variable_id' (@test-pd_classes.R#61) -----------------
x does not have srcref.
1: "hello_world <- function(){\n    print('hello world')\n}\n" %>% parse(text = .) %>% 
       get_parse_data() %>% sort at testthat/test-pd_classes.R:61
2: withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
3: eval(quote(`_fseq`(`_lhs`)), env, env)
4: eval(expr, envir, enclos)
5: `_fseq`(`_lhs`)
6: freduce(value, `_function_list`)
7: function_list[[i]](value)
8: get_parse_data(.)
9: stop("x does not have srcref.")

39. Error: 'is_pd_function' (@test-pd_classes.R#76) ----------------------------
x does not have srcref.
1: get_parse_data(parse(text = "function(){}")) at testthat/test-pd_classes.R:76
2: stop("x does not have srcref.")

40. Error: 'is_root' (@test-root.R#5) ------------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = "rnorm(10, mean=0, sd=1)")) at testthat/test-root.R:5
2: stop("x does not have srcref.")

41. Error: 'all_root_ids' (@test-root.R#61) ------------------------------------
x does not have srcref.
1: get_parse_data(parse(text = {
       "a <- 1\n        {# section 1\n        b <- 2\n        {# section 2\n        c <- 3\n        }# end of section 1\n        d <- 4\n        }# end of section 2\n        e <- 5\n    "
   })) at testthat/test-root.R:61
2: stop("x does not have srcref.")

testthat results ================================================================
OK: 34 SKIPPED: 0 FAILED: 41
1. Error: '._check_id' (@test-check_id.R#5) 
2. Error: '._check_id' (@test-checks.R#5) 
3. Error: '._check_parse_data' (@test-checks.R#15) 
4. Error: 'get_child_ids' (@test-children.R#5) 
5. Error: 'get_child' (@test-children.R#44) 
6. Error: 'get_children' (@test-children.R#67) 
7. Error: 'classify_comment.data.frame' (@test-comments.R#24) 
8. Error: 'classify_comment' (@test-comments.R#43) 
9. Error: 'is_comment.data.frame' (@test-comments.R#61) 
1. ...

Error: testthat unit tests failed
Execution halted
